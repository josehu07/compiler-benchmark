#!/usr/bin/env python3

import sys
import argparse
import os
import os.path
from shutil import which
from pprint import pprint
import random
from datetime import datetime
from os.path import expanduser

from string import Template as Tm
from timeit import default_timer as timer

SUPPORTED_LANGUAGES = ['C', 'C++', 'Ada', 'C#', 'Swift', 'Java', 'D', 'Vox', 'Rust', 'Nim', 'Zig', 'Go', 'V', 'C3', 'Julia', 'OCaml']
TEMPLATED_SUPPORTED_LANGUAGES = ['C++', 'Java', 'D', 'Swift', 'Vox', 'Rust', 'Zig', 'V', 'C3', 'Julia']
DEFAULT_LANGUAGES = ['C', 'C++']
MULTIFILE_SUPPORTED_LANGUAGES = ['C', 'C++']

DEFAULT_PROGRAM_NAME = 'main'
DEFAULT_LIBRARY_NAME = 'lib'
DEFAULT_MAKEFILE_NAME = 'Makefile'

ROOT_PATH = 'generated'
RANGE = range(5, 15)
VERSIONS = [""] + [f"-{i}" for i in RANGE]

TIME_CMD = ['/usr/bin/time', '-v']
SHOW_TIME_CMD_OUTPUT = False

home = os.path.expanduser("~")  # instead of home = os.getenv('HOME') that doesnâ€™t work on Windows


def get_version(version_run):
    return next(part
                for part
                in version_run.stdout.decode('utf-8').split()
                if (part[0].isdigit() or
                    part[0] == 'v' and part[1].isdigit())) # v2.096.1-beta.1-187-gb25be89b3


def touchFile(path):
    with open(path, 'a'):
        os.utime(path, None)


def ate_D_object_file():
    path = os.path.join(ROOT_PATH, 'd', 'object.d')
    touchFile(path=path)
    return path


def out_binary(lang):
    return os.path.join(ROOT_PATH,
                        lang.lower(),
                        DEFAULT_PROGRAM_NAME)


def srcIdOf(lang, templated):
    if lang in TEMPLATED_SUPPORTED_LANGUAGES:
        return lang + ('-Templated' if templated else '-Untemplated')
    else:
        return lang


def factor_str(factor):
    return '{:.1f}'.format(factor)


def repeat_to_length(string_to_expand, length):
    return (string_to_expand * (int(length / len(string_to_expand)) + 1))[:length]


def md_header(text, nr):        # Markdown header
    return '#' * nr + ' ' + text


def long_types_of_lang(lang):
    if lang in ('c', 'c3', 'c++', 'c#', 'java'):
        return ['long']
    elif lang in ('rust', 'zig', 'v', 'vox', 'c3'):
        return ['i64']
    elif lang in 'swift':
        return ['Int64']
    elif lang == 'd':
        return ['long']
    elif lang in ('go', 'nim'):
        return ['int64']
    elif lang == 'julia':
        return ['Int64']
    elif lang == 'ocaml':
        return ['float']
    elif lang == 'ada':
        return ['Long_Integer']  # gnat
    else:
        return None


def language_file_extension(lang):
    if lang == 'rust':
        return 'rs'
    elif lang == 'julia':
        return 'jl'
    elif lang == 'ocaml':
        return 'ml'
    elif lang == 'c#':
        return 'cs'
    elif lang == 'vox':
        return 'vx'
    elif lang == 'ada':
        return 'adb'
    else:
        return lang

def language_header_extension(lang):
    if lang == 'c' or lang == 'c++':
        return 'h'


def generate_test_program(lang, args, templated):
    program_name = DEFAULT_PROGRAM_NAME

    llang = lang.lower()        # lowered language
    types = long_types_of_lang(llang)
    ext = language_file_extension(llang)
    dir_path = os.path.join(ROOT_PATH, llang)
    os.makedirs(dir_path, exist_ok=True)

    path = os.path.join(dir_path, program_name + ('_t' if templated else '') + '.' + ext)

    start = timer()
    with open(path, 'w') as f:
        generate_test_language_specific_prefix(llang, program_name, f, templated=templated)

        if llang == 'ada':
            generate_test_main_signature(llang, types, f, templated)
            generate_main_test_function_definition_set(llang, types, args, f,
                                                       templated=templated)
        else:
            generate_main_test_function_definition_set(llang, types, args, f,
                                                       templated=templated)
            generate_test_main_signature(llang, types, f, templated)

        for typ in types:
            generate_main_test_function_variable(llang, typ, f, templated=templated)

        generate_test_main_middle(llang, types, f, templated)

        for typ in types:
            for findex in range(0, args.function_count):
                generate_test_function_call(llang, findex, typ, f, templated=templated)

        generate_test_language_specific_postfix(llang, types, f)
    end = timer()
    dur = (end - start)  # time dur
    print('- Generating {} took {:1.3f} seconds ({})'.format(path, dur, lang))
    # print('Generated {} source file: {}'.format(llang.upper(), path))

    return path


def generate_multifile_main(lang, args, templated):
    program_name = DEFAULT_PROGRAM_NAME

    llang = lang.lower()        # lowered language
    types = long_types_of_lang(llang)
    ext = language_file_extension(llang)
    dir_path = os.path.join(ROOT_PATH, llang)
    os.makedirs(dir_path, exist_ok=True)

    path = os.path.join(dir_path, program_name + ('_t' if templated else '') + '.' + ext)

    start = timer()
    with open(path, 'w') as f:
        generate_multifile_main_includes(llang, program_name, f, templated=templated)

        generate_test_main_signature(llang, types, f, templated)

        for typ in types:
            generate_main_test_function_variable(llang, typ, f, templated=templated)

        generate_test_main_middle(llang, types, f, templated)

        for typ in types:
            for findex in range(0, args.function_count):
                generate_test_function_call(llang, findex, typ, f, templated=templated)

        generate_test_language_specific_postfix(llang, types, f)
    end = timer()
    dur = (end - start)  # time dur
    print('- Generating {} took {:1.3f} seconds ({})'.format(path, dur, lang))
    # print('Generated {} source file: {}'.format(llang.upper(), path))

    return path

def generate_multifile_header(lang, args, templated):
    program_name = DEFAULT_PROGRAM_NAME

    llang = lang.lower()        # lowered language
    types = long_types_of_lang(llang)
    ext = language_header_extension(llang)
    dir_path = os.path.join(ROOT_PATH, llang)

    path = os.path.join(dir_path, program_name + ('_t' if templated else '') + '.' + ext)

    start = timer()
    with open(path, 'w') as f:
        generate_multifile_header_prefix(llang, program_name, f, templated=templated)

        generate_multifile_function_declaration_set(llang, types, args, f, templated=templated)

        generate_multifile_header_suffix(llang, program_name, f, templated=templated)
    end = timer()
    dur = (end - start)  # time dur
    print('- Generating {} took {:1.3f} seconds ({})'.format(path, dur, lang))
    # print('Generated {} source file: {}'.format(llang.upper(), path))

    return path

def generate_multifile_lib(idx, lang, args, templated):
    library_name = DEFAULT_LIBRARY_NAME

    llang = lang.lower()        # lowered language
    types = long_types_of_lang(llang)
    ext = language_file_extension(llang)
    dir_path = os.path.join(ROOT_PATH, llang)

    path = os.path.join(dir_path, library_name + '_' + str(idx) + ('_t' if templated else '') + '.' + ext)

    start = timer()
    with open(path, 'w') as f:
        generate_multifile_function_definition_set(llang, types, args, f, idx, templated=templated)
    end = timer()
    dur = (end - start)  # time dur
    print('- Generating {} took {:1.3f} seconds ({})'.format(path, dur, lang))
    # print('Generated {} source file: {}'.format(llang.upper(), path))

    return path


def generate_test_function_call(lang, findex, typ, f, templated):
    if lang in ('c#', 'java'):
        f.write('    ')

    if lang == 'zig' and templated:  # Zig needs explicit template type
        f.write(Tm('    ${T}_sum += add_${T}_n${N}(${T}, ${N})').substitute(T=typ, N=str(findex)))
    elif lang == 'v' and templated:  # Zig needs explicit template type for now. See: https://github.com/vlang/v/issues/5818
        f.write(Tm('    ${T}_sum += add_${T}_n${N}<${T}>(${N})').substitute(T=typ, N=str(findex)))
    elif lang == 'ocaml':
        f.write(Tm('    let ${T}_sum = ${T}_sum +. (add_${T}_n${N} ${N}.0) in').substitute(T=typ, N=str(findex)))
    elif lang == 'ada':
        f.write(Tm('   ${T}_sum := ${T}_sum + add_${T}_n${N}(${N})').substitute(T=typ, N=str(findex)))
    elif lang == 'vox':
        f.write(Tm('    ${T}_sum += add_${T}_n${N}${X}(${N})').substitute(T=typ,
                                                                          N=str(findex),
                                                                          X='[' + typ + ']' if templated else ''))
    elif lang == 'swift':
        f.write(Tm('    ${T}_sum += add_${T}_n${N}(x: ${N})').substitute(T=typ, N=str(findex)))
    else:
        f.write(Tm('    ${T}_sum += add_${T}_n${N}(${N})').substitute(T=typ, N=str(findex)))

    if lang not in ('ocaml', 'nim', 'v'):
        f.write(';')            # statement terminator

    f.write('\n')


def generate_test_language_specific_prefix(lang, program_name, f, templated):
    if lang == 'go':
        f.write('package ' + program_name + ';\n')
        f.write('// import ("os")\n\n')  # fails with `gotype`
    elif lang == 'rust':
        f.write('use std::process::exit;\n')
        if templated:
            f.write('use std::ops::Add;\n')
    elif lang == 'swift':
        f.write('import Foundation\n\n')
    elif lang == 'c#':
        f.write('using System;\n\n')
        f.write('public class HelloWorld {\n')
    elif lang == 'java':
        f.write('class HelloWorld {\n')
    elif lang == 'ada':
        f.write('with System;\n\n')
        f.write('with GNAT.OS_Lib;\n\n')
    elif lang == 'vox':
        f.write('''enum u32 stdin = 0;
enum u32 stdout = 1;
enum u32 stderr = 2;

@extern(syscall, 60)
void exit(i32 error_code);

@extern(syscall, 1)
void sys_write(u32 fd, u8* buf, u64 count);

void write(u32 fd, u8[] data) {
	sys_write(fd, data.ptr, data.length);
}
''')


def generate_multifile_header_prefix(lang, program_name, f, templated):
    if lang == 'c' or lang == 'c++':
        guard = "_%s_%s_" % (program_name.upper(), language_header_extension(lang).upper())
        f.write('#ifndef %s\n' % guard)
        f.write('#define %s\n\n' % guard)

def generate_multifile_header_suffix(lang, program_name, f, templated):
    if lang == 'c' or lang == 'c++':
        f.write('#endif\n\n')


def generate_multifile_main_includes(lang, program_name, f, templated):
    if lang == 'c' or lang == 'c++':
        header_name = program_name if not templated else program_name + '_t'
        f.write('#include \"%s.%s\"\n\n' % (header_name, language_header_extension(lang)))


def generate_test_language_specific_postfix(lang, types, f):
    if lang == 'rust':
        f.write(Tm('    exit((${T}_sum % 4294967296) as i32);\n}\n').substitute(T=types[0]))
    elif lang == 'd':
        f.write(Tm('    return cast(int)${T}_sum;\n}\n').substitute(T=types[0]))
    elif lang == 'nim':
        f.write(Tm('    quit(int(${T}_sum))\n\n').substitute(T=types[0]))
    elif lang == 'swift':
        f.write(Tm('    exit(Int32(${T}_sum))\n}\n').substitute(T=types[0]))
    elif lang == 'go':
        f.write(Tm('    // os.Exit(int(${T}_sum));\n').substitute(T=types[0]))
        f.write(Tm('}\n').substitute(T=types[0]))
    elif lang == 'c#':
        f.write(Tm('        Environment.Exit(${T}_sum == 42 ? 1 : 0);\n    }\n').substitute(T=types[0]))
    elif lang == 'java':
        f.write(Tm('        System.exit(${T}_sum == 42 ? 1 : 0);\n    }\n').substitute(T=types[0]))
    elif lang == 'zig':
        f.write(Tm('\n}\n').substitute(T=types[0]))
    elif lang == 'nim':
        f.write(Tm('\n\n').substitute(T=types[0]))
    elif lang == 'c3':
        f.write(Tm('\n}\n').substitute(T=types[0]))  # TODO exit
    elif lang == 'julia':
        f.write(Tm('''    return ${T}_sum;
end

main()
''').substitute(T=types[0]))
    elif lang == 'd':
        f.write(Tm('''    return cast(int)${T}_sum;
}
''').substitute(T=types[0]))
    elif lang == 'vox':
        # TODO: use exit(i32(${T}_sum)) when it doesnâ€™t segfault:
        f.write(Tm('''    exit(0);
    return 0;
}
''').substitute(T=types[0]))
    elif lang == 'ada':
        f.write(Tm('''   GNAT.OS_Lib.OS_Exit(Integer(${T}_sum));
end Main;
''').substitute(T=types[0]))
    elif lang == 'ocaml':
        f.write(Tm('    exit (if ${T}_sum = 42.0 then 1 else 0)\n').substitute(T=types[0]))
    elif lang == 'v':
        f.write(Tm('''    exit(int(${T}_sum >> 32))\n}\n''').substitute(T=types[0]))
    else:
        f.write(Tm('''    return ${T}_sum;\n}\n''').substitute(T=types[0]))

    if lang in ('c#', 'java'):
        f.write('}\n')            # one extra closing brace for class


def generate_main_test_function_definition_set(lang, types, args, f,
                                               templated):
    for typ in types:
        for findex in range(0, args.function_count):
            for fheight in range(0, args.function_depth):
                generate_test_function_definition(args, lang, typ, findex, fheight, f,
                                                  templated=templated)
            f.write('\n')
        f.write('\n')


def generate_multifile_function_definition_set(lang, types, args, f, idx, templated):
    lib_function_count = int(args.function_count / args.multiple_files)
    for typ in types:
        for findex in range(idx * lib_function_count, (idx+1) * lib_function_count):
            for fheight in range(0, args.function_depth):
                generate_test_function_definition(args, lang, typ, findex, fheight, f,
                                                  templated=templated)
            f.write('\n')
        f.write('\n')

def generate_multifile_function_declaration_set(lang, types, args, f, templated):
    for typ in types:
        for findex in range(0, args.function_count):
            generate_test_function_declaration(args, lang, typ, findex, args.function_depth-1, f,
                                               templated=templated)
            f.write('\n')
        f.write('\n')


def function_name(typ, findex, fheight):
    if fheight is not None:
        return Tm('add_${T}_n${N}_h${H}').substitute(T=typ,
                                                     N=str(findex),
                                                     H=str(fheight))
    else:
        return Tm('add_${T}_n${N}').substitute(T=typ,
                                               N=str(findex))


def generate_test_function_definition(args, lang, typ, findex, fheight, f,
                                      templated):
    randomize = True

    random.seed(datetime.now())

    if randomize:
        nconst = str(random.randint(0, 100000))
    else:
        nconst = str(findex)

    if fheight == 0:
        if lang == 'rust' and templated:
            expr = 'x'          # because Rust is picky
        elif lang == 'ocaml':
            expr = 'x +. ' + nconst + '.0'
        else:
            expr = 'x + ' + nconst
    else:
        if lang == 'zig' and templated:
            xtarg = typ + ', '  # Zig needs explicit template parameter
        else:
            xtarg = ''
        if lang == 'rust' and templated:
            call = function_name(typ, findex, fheight - 1) + '(' + xtarg + 'x)'
            expr = 'x + ' + call
        elif lang == 'v' and templated:
            call = function_name(typ, findex, fheight - 1) + Tm('<${T}>(x)').substitute(T=typ)
            expr = 'x + ' + call
        elif lang == 'vox' and templated:
            call = function_name(typ, findex, fheight - 1) + Tm('[${T}](x)').substitute(T=typ)
            expr = 'x + ' + call
        elif lang == 'ocaml':
            expr = 'x +. (' + function_name(typ, findex, fheight - 1) + xtarg + ' x) +. ' + nconst + '.0'
        elif lang == 'swift':
            expr = 'x + ' + function_name(typ, findex, fheight - 1) + '(x: ' + xtarg + 'x) + ' + nconst
        else:
            expr = 'x + ' + function_name(typ, findex, fheight - 1) + '(' + xtarg + 'x) + ' + nconst

    if fheight == args.function_depth - 1:
        fname = function_name(typ, findex, fheight=None)
    else:
        fname = function_name(typ, findex, fheight)

    if lang in ('c'):
        f.write(Tm('${T} ${F}(${T} x) { return ${X}; }\n').substitute(T=typ, F=str(fname), N=nconst, X=expr))
    elif lang in ('c3'):
        f.write(Tm('func ${T} ${F}(${T} x) { return ${X}; }\n').substitute(T=typ, F=str(fname), N=nconst, X=expr))
    elif lang in ['ada']:
        f.write(Tm('''   function ${F} (x: ${T}) return ${T} is (${X});
''').substitute(T=typ, F=str(fname), N=nconst, X=expr))
    elif lang in ['c#']:
        f.write(Tm('    static ${T} ${F}(${T} x) { return ${X}; }\n').substitute(T=typ, F=str(fname), N=nconst, H=str(fheight), X=expr))
    elif lang in ['java']:
        f.write(Tm('    static ${T} ${F}(${T} x) { return ${X}; }\n').substitute(T=typ, F=str(fname), N=nconst, H=str(fheight), X=expr))
    elif lang in ['c++']:
        f.write(Tm('${M}${T} ${F}(${T} x) { return ${X}; }\n')
                .substitute(T=typ, F=str(fname), N=nconst, H=str(fheight),
                            M='template<typename T=int> ' if templated else '',
                            X=expr))
        # template<typename T1, typename T2 = int> class A;
    elif lang in ('d', 'vox'):
        # See: https://forum.dlang.org/post/sfldpxiieahuiizvgjeb@forum.dlang.org
        f.write(Tm('${T} ${F}${M}(${T} x)${Q} { return ${X}; }\n')
                .substitute(T='T' if templated else typ,
                            F=str(fname),
                            N=nconst,
                            H=str(fheight),
                            M=('(T)' if lang == 'd' else '[T]') if templated else '',
                            Q=' @safe pure nothrow @nogc' if lang == 'd' else '',
                            X=expr))
    elif lang == 'rust':
        if templated:
            f.write(Tm('fn ${F}<${T} : ${R}>(x: ${T}) -> ${T} { ${X} }\n').substitute(T='T',
                                                                                      R='Copy + Add<Output = T>',
                                                                                      F=str(fname),
                                                                                      N=nconst,
                                                                                      H=str(fheight),
                                                                                      X=expr))
        else:
            f.write(Tm('fn ${F}(x: ${T}) -> ${T} { ${X} }\n').substitute(T=typ, F=str(fname), N=nconst, H=str(fheight), X=expr))
    elif lang == 'swift':
        if templated:
            f.write(Tm('func ${F}<${T}>(x: ${T}) -> ${T} { return ${X} }\n').substitute(T='T',
                                                                                        F=str(fname),
                                                                                        N=nconst,
                                                                                        H=str(fheight),
                                                                                        X=expr))
        else:
            f.write(Tm('func ${F}(x: ${T}) -> ${T} { return ${X} }\n').substitute(T=typ, F=str(fname), N=nconst, H=str(fheight), X=expr))
    elif lang == 'nim':
        if templated:
            f.write(Tm('proc ${F}<${T}>(x: ${T}): ${T} =\n  return ${X}\n').substitute(T='T',
                                                                                       F=str(fname),
                                                                                       N=nconst,
                                                                                       H=str(fheight),
                                                                                       X=expr))
        else:
            f.write(Tm('proc ${F}(x: ${T}): ${T} = \n  return ${X}\n').substitute(T=typ, F=str(fname), N=nconst, H=str(fheight), X=expr))
    elif lang == 'c3':
        if templated:
            f.write(Tm('func ${F}<${T}>(x: ${T}) -> ${T} { return ${X} }\n').substitute(T='T',
                                                                                        F=str(fname),
                                                                                        N=nconst,
                                                                                        H=str(fheight),
                                                                                        X=expr))
        else:
            f.write(Tm('func ${T} ${F}(${T} x) { return ${X} }\n').substitute(T=typ, F=str(fname), N=nconst, H=str(fheight), X=expr))
    elif lang == 'zig':
        if templated:
            f.write(Tm('fn ${F}(comptime T: type, x: T) T { return ${X}; }\n').substitute(T=typ, F=str(fname), N=nconst, H=str(fheight), X=expr))
        else:
            f.write(Tm('fn ${F}(x: ${T}) ${T} { return ${X}; }\n').substitute(T=typ, F=str(fname), N=nconst, H=str(fheight), X=expr))
    elif lang == 'go':
        f.write(Tm('func ${F}(x ${T}) ${T} { return ${X} }\n').substitute(T=typ, F=str(fname), N=nconst, H=str(fheight), X=expr))
    elif lang == 'ocaml':
        f.write(Tm('let ${F} x = ${X}\n').substitute(F=str(fname), X=expr))
    elif lang == 'v':
        if templated:
            f.write(Tm('fn ${F}<${T}>(x ${T}) ${T} { return ${X} }\n').substitute(T='T', F=str(fname), N=nconst, H=str(fheight), X=expr))
        else:
            f.write(Tm('fn ${F}(x ${T}) ${T} { return ${X} }\n').substitute(T=typ, F=str(fname), N=nconst, H=str(fheight), X=expr))
    elif lang == 'julia':
        f.write(Tm('function ${F}(x${QT})${QT}\n    return ${X}\nend;\n').substitute(QT=('' if templated else ('::' + typ)),
                                                                                     F=str(fname), N=nconst, H=str(fheight), X=expr))


def generate_test_function_declaration(args, lang, typ, findex, fheight, f, templated):
    if fheight == args.function_depth - 1:
        fname = function_name(typ, findex, fheight=None)
    else:
        fname = function_name(typ, findex, fheight)

    if lang == 'c':
        f.write(Tm('${T} ${F}(${T} x);\n').substitute(T=typ, F=str(fname)))
    elif lang == 'c++':
        f.write(Tm('${M}${T} ${F}(${T} x);\n')
                .substitute(T=typ, F=str(fname), H=str(fheight),
                            M='template<typename T=int> ' if templated else ''))
        # template<typename T1, typename T2 = int> class A;


def generate_test_main_signature(lang, types, f, templated):
    if lang in ['c', 'c++']:
        # `cproc` cannot handle this skip for now:
        # f.write('int main(__attribute__((unused)) int argc, __attribute__((unused)) char* argv[]) {\n')
        f.write('int main(void) {\n')
    elif lang == 'ada':
        f.write('procedure Main is\n')
    elif lang == 'c#':
        f.write('    public static void Main(string[] args) {\n')
    elif lang == 'java':
        f.write('    public static void main(String args[]) {\n')
    elif lang == 'd':
        f.write('int main() @safe {\n')
    elif lang == 'vox':
        f.write('i32 main() {\n')
    elif lang == 'rust':
        f.write(Tm('fn main() {\n').substitute(T=types[0]))
    elif lang == 'swift':
        f.write(Tm('func main() {\n').substitute(T=types[0]))
    elif lang == 'zig':
        f.write(Tm('pub fn main() void {\n').substitute(T=types[0]))
    elif lang == 'c3':
        f.write(Tm('func void main() {\n').substitute(T=types[0]))
    elif lang == 'go':
        f.write(Tm('func main() {\n').substitute(T=types[0]))
    elif lang == 'v':
        f.write(Tm('fn main() {\n').substitute(T=types[0]))
    elif lang == 'julia':
        f.write(Tm('function main()${QT}\n').substitute(QT=(('::' + types[0]) if templated else '')))
    elif lang == 'ocaml':
        f.write('let () = \n')
    elif lang == 'nim':
        f.write('when isMainModule:\n')
    else:
        assert False


def generate_test_main_middle(lang, types, f, templated):
    if lang == 'ada':
        f.write('begin\n')


def generate_main_test_function_variable(lang, typ, f, templated):
    if lang in ('c', 'c3', 'c++', 'd', 'vox'):
        f.write(Tm('    ${T} ${T}_sum = 0;\n').substitute(T=typ))
    elif lang in ['ada']:
        f.write(Tm('   ${T}_sum : ${T} := 0;\n').substitute(T=typ))
    elif lang in ['c#']:
        f.write(Tm('        ${T} ${T}_sum = 0;\n').substitute(T=typ))
    elif lang in ['java']:
        f.write(Tm('        ${T} ${T}_sum = 0;\n').substitute(T=typ))
    elif lang == 'rust':
        f.write(Tm('    let mut ${T}_sum : ${T} = 0;\n').substitute(T=typ))
    elif lang == 'swift':
        f.write(Tm('    var ${T}_sum: ${T} = 0;\n').substitute(T=typ))
    elif lang == 'nim':
        f.write(Tm('    var ${T}_sum: ${T} = 0;\n').substitute(T=typ))
    elif lang == 'zig':
        f.write(Tm('    var ${T}_sum: ${T} = 0;\n').substitute(T=typ))
    elif lang == 'go':
        f.write(Tm('    var ${T}_sum ${T} = 0;\n').substitute(T=typ))
    elif lang == 'v':
        f.write(Tm('    mut ${T}_sum := ${T}(0)\n').substitute(T=typ))
    elif lang == 'julia':
        f.write(Tm('    ${T}_sum${QT} = 0;\n').substitute(T=typ, QT=(('::' + typ) if templated else '')))
    elif lang == 'ocaml':
        f.write(Tm('    let ${T}_sum = 0.0 in\n').substitute(T=typ))
    else:
        assert False


def generate_test_program_2(function_count, lang, templated):
    program_name = 'sample2'

    lang = lang.lower()
    types = long_types_of_lang(lang)
    ext = language_file_extension(lang)
    dir_path = os.path.join(ROOT_PATH, lang)
    os.makedirs(dir_path, exist_ok=True)
    path = os.path.join(dir_path, program_name + '.' + ext)

    start = timer()
    with open(path, 'w') as f:

        # package definition
        if lang == 'go':
            f.write('''package ''' + program_name + ''';

''')

        # standard io module
        if lang in ['c']:
            f.write('''#include <stdio.h>
''')
        if lang in ['c++']:
            f.write('''#include <iostream>
''')
        if lang in ('d', 'vox'):
            f.write('''import std.stdio;
''')
        if lang == 'rust':
            f.write('''use std::io;
''')
        if lang == 'c3':
            f.write('''import std::io;
''')
        if lang == 'go':
            f.write('''import "fmt";

''')
        if lang == 'v':
            f.write('''import os
''')

        # special modules
        if lang == 'rust':
            f.write('''use std::process::exit;
''')

        for typ in types:
            for findex in range(0, function_count):
                if lang in ('c', 'c3', 'c++'):
                    f.write(Tm('''${T} add_${T}_n${N}(${T} x) { return x + ${N}; }
''').substitute(T=typ, N=str(findex)))
                if lang in ('d', 'vox'):
                    f.write(Tm('''${T} add_${T}_n${N}(${T} x) pure { return x + ${N}; }
''').substitute(T=typ, N=str(findex)))
                elif lang == 'rust':
                    f.write(Tm('''fn add_${T}_n${N}(x: ${T}) -> ${T} { x + ${N} }
''').substitute(T=typ, N=str(findex)))
                elif lang == 'zig':
                    f.write(Tm('''fn add_${T}_n${N}(x: ${T}) ${T} { return x + ${N}; }
''').substitute(T=typ, N=str(findex)))
                elif lang == 'go':
                    f.write(Tm('''func add_${T}_n${N}(x ${T}) ${T} { return x + ${N} }
''').substitute(T=typ, N=str(findex)))
                elif lang == 'ocaml':
                    f.write(Tm('''let add_${T}_n${N} x = x +. ${N}.0
''').substitute(T=typ, N=str(findex)))
                elif lang == 'v':
                    f.write(Tm('''fn add_${T}_n${N}(x ${T}) ${T} { return x + ${N} }
''').substitute(T=typ, N=str(findex)))
                elif lang == 'julia':
                    f.write(Tm('''function add_${T}_n${N}(x${QT})${QT}
    return x + ${N}
end;
''').substitute(QT=('' if templated else ('::' + typ)), N=str(findex)))
                    f.write('\n')

        # MAIN HEADER
        if lang in ['c', 'c++']:
            f.write('''int main(__attribute__((unused)) int argc, __attribute__((unused)) char* argv[])
{
''')
        elif lang in ('d', 'vox'):
            f.write('''int main(string[] args)
{
''')
        elif lang == 'rust':
            f.write(Tm('''fn main() {
''').substitute(T=types[0]))
        elif lang == 'zig':
            f.write(Tm('''pub fn main() void {
''').substitute(T=types[0]))
        elif lang == 'go':
            f.write(Tm('''func main() ${T} {
''').substitute(T=types[0]))
        elif lang == 'v':
            f.write(Tm('''fn main() ${T} {
''').substitute(T=types[0]))
        elif lang == 'julia':
            f.write(Tm('''function main()::${T}
''').substitute(T=types[0]))
        else:
            assert False

        # CALCULATE
        for typ in types:
            if lang in ('c', 'c3', 'c++', 'd', 'vox'):
                f.write(Tm('''    ${T} ${T}_sum = 0;
''').substitute(T=typ))
            elif lang == 'rust':
                f.write(Tm('''    let mut ${T}_sum : ${T} = 0;
''').substitute(T=typ))
            elif lang == 'zig':
                f.write(Tm('''    var ${T}_sum: ${T} = 0;
''').substitute(T=typ))
            elif lang == 'go':
                f.write(Tm('''    var ${T}_sum ${T} = 0;
''').substitute(T=typ))
            elif lang == 'v':
                f.write(Tm('''    var ${T}_sum ${T} = 0;
''').substitute(T=typ))
            elif lang == 'julia':
                f.write(Tm('''    ${T}_sum${QT} = 0;
''').substitute(QT=('' if templated else ('::' + typ))))
            else:
                assert False

            for findex in range(0, function_count):
                f.write(Tm('''    ${T}_sum += add_${T}_n${N}(${N});
''').substitute(T=typ, N=str(findex)))

        if lang == 'rust':
            f.write(Tm('''    exit(${T}_sum);
}
''').substitute(T=types[0]))
        elif lang == 'zig':
            f.write(Tm('''
}
''').substitute(T=types[0]))
        elif lang == 'ocaml':
            f.write(Tm('''    ${T}_sum''').substitute(T=types[0]))
        elif lang == 'julia':
            f.write(Tm('''    return ${T}_sum;
end

main()
''').substitute(T=types[0]))
        elif lang in ('d', 'vox'):
            f.write(Tm('''    return cast(int)${T}_sum;
}
''').substitute(T=types[0]))
        else:
            f.write(Tm('''    return ${T}_sum;
}
''').substitute(T=types[0]))

    end = timer()
    dur = (end - start)  # time dur
    print('- Generating {} took {:1.3f} seconds ({})'.format(path, dur, lang))

    # print('Generated {} source file: {}'.format(lang.upper(), path))

    return path


def generate_code_singufile(args):
    print(md_header('Code-generation:', 1))
    gpaths = {}
    for lang in args.languages:
        templated = False
        gpaths[srcIdOf(lang, templated)] = generate_test_program(lang=lang,
                                                                 args=args,
                                                                 templated=templated)
        if lang in TEMPLATED_SUPPORTED_LANGUAGES:
            templated = True
            gpaths[srcIdOf(lang, templated)] = generate_test_program(lang=lang,
                                                                     args=args,
                                                                     templated=templated)
    print()
    return gpaths

def generate_code_multifile(args):
    print(md_header('Code-generation:', 1))
    gpaths = {}

    for lang in args.languages:
        # Only support non-templated version of multi-files
        templated = False

        srcId = srcIdOf(lang, templated)
        gpaths[srcId] = [generate_multifile_main(lang=lang, args=args, templated=templated)]
        gpaths[srcId].append(generate_multifile_header(lang=lang, args=args, templated=templated))
        for i in range(args.multiple_files):
            gpaths[srcId].append(generate_multifile_lib(i, lang=lang, args=args, templated=templated))
    
        print()

    return gpaths
    

def generate_makefile_C_and_CXX(lang, ext, program_name, makefile_name, f):
    compiler = 'gcc' if lang == 'c' else 'g++'
    f.write("CC=%s\n" % compiler)
    f.write("CFLAGS=\n\n")
    f.write("OBJS=$(patsubst %%.%s, %%.o, $(wildcard *.%s))\n\n" % (ext, ext))
    f.write("all: %s\n\n" % program_name)
    f.write("%%.o: %%.%s\n" % ext)
    f.write("\t${CC} ${CFLAGS} -c $< -o $@\n\n")
    f.write("%s: ${OBJS}\n" % program_name)
    f.write("\t${CC} ${CFLAGS} $^ -o $@\n\n")
    f.write("clean:\n")
    f.write("\trm -f *.o %s\n" % program_name)


def generate_makefile(args):
    program_name = DEFAULT_PROGRAM_NAME
    makefile_name = DEFAULT_MAKEFILE_NAME

    for lang in args.languages:
        llang = lang.lower()        # lowered language
        ext = language_file_extension(llang)
        dir_path = os.path.join(ROOT_PATH, llang)

        path = os.path.join(dir_path, makefile_name)

        start = timer()
        if llang == 'c' or llang == 'c++':
            with open(path, 'w') as f:
                generate_makefile_C_and_CXX(llang, ext, program_name, makefile_name, f)
        else:
            assert False
        end = timer()
        dur = (end - start)  # time dur
        print('- Generating {} took {:1.3f} seconds ({})'.format(path, dur, lang))
        # print('Generated {} source file: {}'.format(llang.upper(), path))


def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('--languages', '--langs', type=str,
                        default=','.join(DEFAULT_LANGUAGES),
                        help='Languages to benchmark separated by comma')

    parser.add_argument('--function-count', '--fc', type=int,
                        default=100,
                        help='Number of functions generated and called')

    parser.add_argument('--function-depth', '--fd', type=int,
                        default=100,
                        help='Function call depth')

    parser.add_argument('--multiple-files', '--libs', type=int,
                        default=0,
                        help='Number of library files, 0 means only main')

    args = parser.parse_args()

    args.languages = list(map(lambda x: 'OCaml' if x.lower() == 'ocaml' else x.capitalize(),
                              args.languages.split(',')))  # into a list
    filtered_languages = []
    for language in args.languages:
        if language in SUPPORTED_LANGUAGES:
            if args.multiple_files > 0 and language not in MULTIFILE_SUPPORTED_LANGUAGES:
                print('Warning: Ignoring multi-file mode unsuported language ' + language)
            else:
                filtered_languages.append(language)
        else:
            print('Warning: Ignoring unsupported language ' + language)
    args.languages = filtered_languages

    if args.multiple_files == 0:
        generate_code_singufile(args=args)
    elif args.multiple_files > 0:
        if args.function_count % args.multiple_files != 0:
            print("Error: function_count must be a multiple of num of lib files", file=sys.stderr)
            exit(1)
        generate_code_multifile(args=args)
        generate_makefile(args=args)
    else:
        print("Error: negative number of library files", file=sys.stderr)
        exit(1)


if __name__ == '__main__':
    main()
